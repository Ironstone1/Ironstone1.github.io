Help on BufferedRandom object:

class BufferedRandom(_BufferedIOBase)
 |  BufferedRandom(raw, buffer_size=8192)
 |
 |  A buffered interface to random access streams.
 |
 |  The constructor creates a reader and writer for a seekable stream,
 |  raw, given in the first argument. If the buffer_size is omitted it
 |  defaults to DEFAULT_BUFFER_SIZE.
 |
 |  Method resolution order:
 |      BufferedRandom
 |      _BufferedIOBase
 |      _IOBase
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  __next__(self, /)
 |      Implement next(self).
 |
 |  __repr__(self, /)
 |      Return repr(self).
 |
 |  __sizeof__(...)
 |      Size of object in memory, in bytes.
 |
 |  close(...)
 |      Flush and close the IO object.
 |
 |      This method has no effect if the file is already closed.
 |
 |  detach(...)
 |      Disconnect this buffer from its underlying raw stream and return it.
 |
 |      After the raw stream has been detached, the buffer is in an unusable
 |      state.
 |
 |  fileno(...)
 |      Returns underlying file descriptor if one exists.
 |
 |      OSError is raised if the IO object does not use a file descriptor.
 |
 |  flush(...)
 |      Flush write buffers, if applicable.
 |
 |      This is not implemented for read-only and non-blocking streams.
 |
 |  isatty(...)
 |      Return whether this is an 'interactive' stream.
 |
 |      Return False if it can't be determined.
 |
 |  peek(self, size=0, /)
 |
 |  read(self, size=-1, /)
 |      Read and return up to n bytes.
 |
 |      If the argument is omitted, None, or negative, reads and
 |      returns all data until EOF.
 |
 |      If the argument is positive, and the underlying raw stream is
 |      not 'interactive', multiple raw reads may be issued to satisfy
 |      the byte count (unless EOF is reached first).  But for
 |      interactive raw streams (as well as sockets and pipes), at most
 |      one raw read will be issued, and a short result does not imply
 |      that EOF is imminent.
 |
 |      Returns an empty bytes object on EOF.
 |
 |      Returns None if the underlying raw stream was open in non-blocking
 |      mode and no data is available at the moment.
 |
 |  read1(self, size=-1, /)
 |      Read and return up to n bytes, with at most one read() call
 |      to the underlying raw stream. A short result does not imply
 |      that EOF is imminent.
 |
 |      Returns an empty bytes object on EOF.
 |
 |  readable(...)
 |      Return whether object was opened for reading.
 |
 |      If False, read() will raise OSError.
 |
 |  readinto(self, buffer, /)
 |
 |  readinto1(self, buffer, /)
 |
 |  readline(self, size=-1, /)
 |      Read and return a line from the stream.
 |
 |      If size is specified, at most size bytes will be read.
 |
 |      The line terminator is always b'\n' for binary files; for text
 |      files, the newlines argument to open can be used to select the line
 |      terminator(s) recognized.
 |
 |  seek(self, target, whence=0, /)
 |      Change stream position.
 |
 |      Change the stream position to the given byte offset. The offset is
 |      interpreted relative to the position indicated by whence.  Values
 |      for whence are:
 |
 |      * 0 -- start of stream (the default); offset should be zero or positive
 |      * 1 -- current stream position; offset may be negative
 |      * 2 -- end of stream; offset is usually negative
 |
 |      Return the new absolute position.
 |
 |  seekable(...)
 |      Return whether object supports random access.
 |
 |      If False, seek(), tell() and truncate() will raise OSError.
 |      This method may need to do a test seek().
 |
 |  tell(...)
 |      Return current stream position.
 |
 |  truncate(self, pos=None, /)
 |      Truncate file to size bytes.
 |
 |      File pointer is left unchanged.  Size defaults to the current IO
 |      position as reported by tell().  Returns the new size.
 |
 |  writable(...)
 |      Return whether object was opened for writing.
 |
 |      If False, write() will raise OSError.
 |
 |  write(self, buffer, /)
 |      Write the given buffer to the IO stream.
 |
 |      Returns the number of bytes written, which is always the length of b
 |      in bytes.
 |
 |      Raises BlockingIOError if the buffer is full and the
 |      underlying raw stream cannot accept more data at the moment.
 |
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  closed
 |
 |  mode
 |
 |  name
 |
 |  raw
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from _IOBase:
 |
 |  __del__(...)
 |
 |  __enter__(...)
 |
 |  __exit__(...)
 |
 |  __iter__(self, /)
 |      Implement iter(self).
 |
 |  readlines(self, hint=-1, /)
 |      Return a list of lines from the stream.
 |
 |      hint can be specified to control the number of lines read: no more
 |      lines will be read if the total size (in bytes/characters) of all
 |      lines so far exceeds hint.
 |
 |  writelines(self, lines, /)
 |      Write a list of lines to stream.
 |
 |      Line separators are not added, so it is usual for each of the
 |      lines provided to have a line separator at the end.
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _IOBase:
 |
 |  __dict__